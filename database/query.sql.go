// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    owner, country_code,
    currency, balance,
    mail
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, owner, country_code, currency, balance, mail, created_at
`

type CreateAccountParams struct {
	Owner       string
	CountryCode string
	Currency    string
	Balance     int64
	Mail        string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Owner,
		arg.CountryCode,
		arg.Currency,
		arg.Balance,
		arg.Mail,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.CountryCode,
		&i.Currency,
		&i.Balance,
		&i.Mail,
		&i.CreatedAt,
	)
	return i, err
}

const createEntrie = `-- name: CreateEntrie :one
INSERT INTO entries (
    account_id, amount
) VALUES (
    $1, $2
)
RETURNING id, account_id, amount, created_at
`

type CreateEntrieParams struct {
	AccountID int64
	Amount    int64
}

func (q *Queries) CreateEntrie(ctx context.Context, arg CreateEntrieParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntrie, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
    from_account_id, to_account_id, amount
) VALUES (
    $1, $2, $3
)
RETURNING id, from_account_id, to_account_id, amount, created_at
`

type CreateTransferParams struct {
	FromAccountID int64
	ToAccountID   int64
	Amount        int64
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const deleteEntrie = `-- name: DeleteEntrie :exec
DELETE FROM entries
WHERE id = $1
`

func (q *Queries) DeleteEntrie(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntrie, id)
	return err
}

const deleteTransfer = `-- name: DeleteTransfer :exec
DELETE FROM transfers
WHERE id = $1
`

func (q *Queries) DeleteTransfer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransfer, id)
	return err
}

const getAccounts = `-- name: GetAccounts :one
SELECT id, owner, country_code, currency, balance, mail, created_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccounts(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccounts, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.CountryCode,
		&i.Currency,
		&i.Balance,
		&i.Mail,
		&i.CreatedAt,
	)
	return i, err
}

const getEntries = `-- name: GetEntries :one
SELECT id, account_id, amount, created_at FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntries(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntries, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getListAccounts = `-- name: GetListAccounts :many
SELECT id, owner, country_code, currency, balance, mail, created_at FROM accounts
LIMIT $1
`

func (q *Queries) GetListAccounts(ctx context.Context, limit int32) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getListAccounts, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.CountryCode,
			&i.Currency,
			&i.Balance,
			&i.Mail,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListEntries = `-- name: GetListEntries :many
SELECT id, account_id, amount, created_at FROM entries
LIMIT $1
`

func (q *Queries) GetListEntries(ctx context.Context, limit int32) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getListEntries, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListTransfers = `-- name: GetListTransfers :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers
LIMIT $1
`

func (q *Queries) GetListTransfers(ctx context.Context, limit int32) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getListTransfers, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfers = `-- name: GetTransfers :one
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfers(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfers, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET owner = $2, country_code = $3, currency = $4, balance = $5, mail = $6
WHERE id = $1
RETURNING id, owner, country_code, currency, balance, mail, created_at
`

type UpdateAccountParams struct {
	ID          int32
	Owner       string
	CountryCode string
	Currency    string
	Balance     int64
	Mail        string
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.ID,
		arg.Owner,
		arg.CountryCode,
		arg.Currency,
		arg.Balance,
		arg.Mail,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.CountryCode,
		&i.Currency,
		&i.Balance,
		&i.Mail,
		&i.CreatedAt,
	)
	return i, err
}

const updateEntrie = `-- name: UpdateEntrie :one
UPDATE entries
SET account_id = $2, amount = $3
WHERE id = $1
RETURNING id, account_id, amount, created_at
`

type UpdateEntrieParams struct {
	ID        int64
	AccountID int64
	Amount    int64
}

func (q *Queries) UpdateEntrie(ctx context.Context, arg UpdateEntrieParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntrie, arg.ID, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const updateTransfer = `-- name: UpdateTransfer :one
UPDATE transfers
SET from_account_id = $2, to_account_id = $3, amount = $4
WHERE id = $1
RETURNING id, from_account_id, to_account_id, amount, created_at
`

type UpdateTransferParams struct {
	ID            int64
	FromAccountID int64
	ToAccountID   int64
	Amount        int64
}

func (q *Queries) UpdateTransfer(ctx context.Context, arg UpdateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, updateTransfer,
		arg.ID,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
